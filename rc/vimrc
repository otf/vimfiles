" basic configuration {{{1
filetype on
filetype plugin indent on
syntax on
set nocompatible             " be iMproved
set noswapfile
set nobackup
set noundofile
set number                   
set clipboard=unnamed        
set list                     
set lcs=tab:^\               
set display=uhex
set ignorecase
set smartcase
set incsearch
set wrapscan
set hlsearch
set tw=0
set statusline=%<%f\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%([%{GitBranch()}]%)%l,%c%8P
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set enc=utf-8
set fenc=utf-8

" key mapping {{{1
for key in ['j', 'k', 'gg', 'G', '{', '}', '[', ']', '[(', '])',
            \ '[{', ']}', ']m', ']M', '[m', '[M', '[#', ']#', '[*', ']*', '[/', ']/',
            \ '%', 'H', 'L', 'w', 'W', 'e', 'ge', 'b', 'B', '<C-d>', '<C-u>', '<C-f>', '<C-b>']
    execute 'nnoremap ' . key . ' ' . key . 'zz'
endfor

let mapleader = "\<Space>"


" for open vimrc & gvimrc {{{1
function! SourceIfExists(file)
    if filereadable(expand(a:file))
        execute 'source ' . a:file
    endif
    echo 'Reloaded vimrc and gvimrc.'
endfunction

let vimrcbody = '$HOME/_vimrc'
let gvimrcbody = '$HOME/_gvimrc'
function! OpenFile(file)
    let empty_buffer = line('$') == 1 && strlen(getline('1')) == 0
    if empty_buffer && !&modified
        execute 'e ' . a:file
    else
        execute 'tabnew ' . a:file
    endif
endfunction

command! OpenMyVimrc call OpenFile(vimrcbody)
command! OpenMyGVimrc call OpenFile(gvimrcbody)" open vimrc/gvimrc

" for reload vimrc and gvimrc {{{1
nnoremap <F5> <Esc>:<C-u>source $MYVIMRC<CR>
            \ :source $MYGVIMRC<CR>
            \ :call SourceIfExists('~/vimfiles/ftplugin/' . &filetype . '.vim')<CR>
nnoremap <Space><Space> :<C-u>OpenMyVimrc<CR>
nnoremap <Space><Tab> :<C-u>OpenMyGVimrc<CR>

" for command-line window{{{1
nnoremap q: q:<Esc>
function! Enable_cmdwin_keymap()
    nnoremap <sid>(command-line-enter) q:
    xnoremap <sid>(command-line-enter) q:
    nnoremap <sid>(command-line-norange) q:<C-u>

    nmap :  <sid>(command-line-enter)
    xmap :  <sid>(command-line-enter)
endfunction

function! Disable_cmdwin_keymap()
    nunmap <sid>(command-line-enter)
    xunmap <sid>(command-line-enter)
    nunmap <sid>(command-line-norange)
    nunmap :
    xunmap :
endfunction

call Enable_cmdwin_keymap()

augroup MyAutoCmd
    autocmd!
    autocmd CmdwinEnter * call s:init_cmdwin()
augroup END

function! s:init_cmdwin()
    nnoremap <buffer> q :<C-u>quit<CR>
    nnoremap <buffer> <Tab> :<C-u>quit<CR>
    inoremap <buffer><expr><CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
    inoremap <buffer><expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
    inoremap <buffer><expr><BS> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"

    " Completion.
    inoremap <buffer><expr><Tab>  pumvisible() ? "\<C-n>" : "\<Tab>"

    nnoremap <buffer> <Esc><Esc> :<C-u>q<CR>
    inoremap <buffer> <Esc><Esc> <Esc>:q<CR>

    startinsert!
endfunction

" for open URL {{{1
function! HandleURI()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  echo s:uri
  if s:uri != ""
    exec "!start /b cmd /c browse \"" . s:uri . "\""
  else
    echo "No URI found in line."
  endif
endfunction


map <Leader>w :call HandleURI()<CR>

function! EvalFs()
  exec "'<,'>!eval-fs"
endfunction

" for cal fs{{{1
map <Leader>r :call EvalFs()<CR>

" neobundle {{{1
set runtimepath^=~/.vim/bundle/neobundle.vim/
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundle 'mattn/webapi-vim'
NeoBundle 'mattn/excelview-vim'
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc'
NeoBundle 'VimClojure'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle "Shougo/neosnippet-snippets"
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'scrooloose/syntastic'
"NeoBundle 'rbtnn/winime.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'simeji/winresizer'
NeoBundle 'xmledit'
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'vim-scripts/vim-auto-save'
NeoBundle 'kannokanno/previm'
NeoBundle 'kana/vim-submode'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'vim-scripts/asciidoc.vim'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'motemen/git-vim'
NeoBundle 'thinca/vim-qfreplace'
NeoBundleFetch 'Shougo/neobundle.vim'

call neobundle#end()

" variables{{{
let g:vimfiler_as_default_explorer = 1
let g:previm_open_cmd = 'browse'
let g:vimfiler_edit_action = 'tabopen'

" vim: foldmethod=marker
" vim: foldcolumn=3
" vim: foldlevel=0
