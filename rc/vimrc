set nocompatible               " be iMproved
set noswapfile
set nobackup
set noundofile
set number                   " 行番号を表示
set clipboard=unnamed        " yとかpとかdでクリップボードを使ってくれる
set list                     " 下のlcsに必須
set lcs=tab:^\               " タブ文字を分かりやすく表示(\の後に空白文字が必要)
set display=uhex             " 表示できない文字を16進表示
set ignorecase               " 下のsmartcaseに必須
set smartcase                " 基本大文字と小文字を無視して検索し、大文字が含まれる場合は無視せずに検索する
set incsearch                " インクリメンタルに検索する
set wrapscan                 " ドキュメントの下まで行ったら一番最初に戻って検索
set hlsearch                 " マッチした語をハイライト表示する
set tw=0
" stataus line
set statusline=%<%f\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%([%{GitBranch()}]%)%l,%c%8P

" tab character
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" encoding
"set encoding=utf-8
set enc=utf-8
set fenc=utf-8

" move
for key in ['j', 'k', 'gg', 'G', '{', '}', '[', ']', '[(', '])',
            \ '[{', ']}', ']m', ']M', '[m', '[M', '[#', ']#', '[*', ']*', '[/', ']/',
            \ '%', 'H', 'L', 'w', 'W', 'e', 'ge', 'b', 'B', '<C-d>', '<C-u>', '<C-f>', '<C-b>']
    execute 'nnoremap ' . key . ' ' . key . 'zz'
endfor

" for todo 
command! Todo call OpenFile('~/Dropbox/private/todo.md')

"================================================================================
" vimrc & gvimrc {{{
"================================================================================

function! SourceIfExists(file)
    if filereadable(expand(a:file))
        execute 'source ' . a:file
    endif
    echo 'Reloaded vimrc and gvimrc.'
endfunction

let vimrcbody = '$HOME/_vimrc'
let gvimrcbody = '$HOME/_gvimrc'
function! OpenFile(file)
    let empty_buffer = line('$') == 1 && strlen(getline('1')) == 0
    if empty_buffer && !&modified
        execute 'e ' . a:file
    else
        execute 'tabnew ' . a:file
    endif
endfunction

command! OpenMyVimrc call OpenFile(vimrcbody)
command! OpenMyGVimrc call OpenFile(gvimrcbody)" open vimrc/gvimrc
" reload vimrc and gvimrc
nnoremap <F5> <Esc>:<C-u>source $MYVIMRC<CR>
            \ :source $MYGVIMRC<CR>
            \ :call SourceIfExists('~/vimfiles/ftplugin/' . &filetype . '.vim')<CR>
" open vimrc/gvimrc
nnoremap <Space><Space> :<C-u>OpenMyVimrc<CR>
nnoremap <Space><Tab> :<C-u>OpenMyGVimrc<CR>

"============================================================
" Unite
"============================================================
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle/'))
endif
" originalrepos on github
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc'
NeoBundle 'VimClojure'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle "Shougo/neosnippet-snippets"
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'rbtnn/winime.vim', {
    \  'build' : {
    \     'windows' : 'make -f make_mingw32.mak',
    \   }
    \ }
" for xml
NeoBundle 'xmledit'

" for markdown
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'kannokanno/previm'
NeoBundle 'tyru/open-browser.vim'

au BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'chrome'

" html5の追加タグ
NeoBundle 'three/html5.vim'

" for read cgi
NeoBundle 'koron/chalice'

" for git
NeoBundle 'motemen/git-vim'

" for Haskell
NeoBundle 'kana/vim-filetype-haskell'
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'osyo-manga/vim-watchdogs'
NeoBundle 'thinca/vim-ref'
NeoBundle 'ujihisa/ref-hoogle'
NeoBundle 'lukerandall/haskellmode-vim'
""NeoBundle 'https://bitbucket.org/kovisoft/slimv'

NeoBundle 'thinca/vim-qfreplace'
" use ghc functionality for haskell files
au BufEnter *.hs compiler ghc

" switch on syntax highlighting
syntax on

" enable filetype detection, plus loading of filetype plugins
filetype plugin on

" configure browser for haskell_doc.vim
let g:haddock_browser = "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
let g:ghc="C:\Program Files\Haskell Platform\2014.2.0.0\bin"

filetype plugin indent on     " required!
filetype indent on
syntax on

" command-line window
nnoremap q: q:<Esc>
function! Enable_cmdwin_keymap()
    nnoremap <sid>(command-line-enter) q:
    xnoremap <sid>(command-line-enter) q:
    nnoremap <sid>(command-line-norange) q:<C-u>

    nmap :  <sid>(command-line-enter)
    xmap :  <sid>(command-line-enter)
endfunction

function! Disable_cmdwin_keymap()
    nunmap <sid>(command-line-enter)
    xunmap <sid>(command-line-enter)
    nunmap <sid>(command-line-norange)
    nunmap :
    xunmap :
endfunction

call Enable_cmdwin_keymap()

augroup MyAutoCmd
    autocmd!
    autocmd CmdwinEnter * call s:init_cmdwin()
augroup END

function! s:init_cmdwin()
    nnoremap <buffer> q :<C-u>quit<CR>
    nnoremap <buffer> <Tab> :<C-u>quit<CR>
    inoremap <buffer><expr><CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
    inoremap <buffer><expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
    inoremap <buffer><expr><BS> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"

    " Completion.
    inoremap <buffer><expr><Tab>  pumvisible() ? "\<C-n>" : "\<Tab>"

    nnoremap <buffer> <Esc><Esc> :<C-u>q<CR>
    inoremap <buffer> <Esc><Esc> <Esc>:q<CR>

    startinsert!
endfunction

function! HandleURI()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  echo s:uri
  if s:uri != ""
    exec "!start /b cmd /c browse \"" . s:uri . "\""
  else
    echo "No URI found in line."
  endif
endfunction

map <Leader>w :call HandleURI()<CR>

function! EvalFs()
  exec "'<,'>!eval-fs"
endfunction

map <Leader>f :call EvalFs()<CR>
